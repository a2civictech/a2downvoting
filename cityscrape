#!/bin/sh

# usage cityscrape mon year

# where mon is three-letter lowercase month designator, e.g., may, aug, or nov
# and year is a four digit year, e.g., 2018

usage() {
	echo usage: cityscrape mon year >&2
        echo where mon is three-letter lowercase month designator, e.g., may, aug, or nov >&2
        echo and year is a four digit year, e.g., 2018 >&2
        exit 1
}

### args checking
case $# in
2)	;;
*)	usage ;;
esac

case $1 in
may|aug|nov)	;;
*)		echo is $1 an election month? i will try ... ;;
esac

case $2 in
20[0-9][0-9])	;;
*)		echo $2 is not a valid year >&2 
		usage ;;
esac

monyear=$1$2

# set up the cache drectory
if [ ! -d cachedir ]; then
	mkdir cachedir
fi

if [ ! -d cachedir/$monyear ]; then
	mkdir cachedir/$monyear
fi

if [ ! -s cachedir/$monyear/indexprecinctreport.html ]; then
	### TODO: if exit status is non-zero, mon year is invalid so complain and exit
	wget -q -O cachedir/$monyear/indexprecinctreport.html https://electionresults.ewashtenaw.org/electionreporting/$monyear/indexprecinctreport.html
fi

	grep 'City of Ann Arbor' cachedir/$monyear/indexprecinctreport.html | sed -e 's/.*<a href=.//' -e 's/.>.*//' | while read file; do

	if [ ! -s cachedir/$monyear/$file ]; then
		### TODO (?): if exit status is nonzero, some kind of internal error, so apologize and exit
		wget -q -O cachedir/$monyear/$file https://electionresults.ewashtenaw.org/electionreporting/$monyear/$file
	fi
	wardscrape cachedir/$monyear/$file
done | awk '

BEGIN {verbose=0}
NF == 13 {
	Ward = $2; Precinct = $4; WPRegisteredVoters = $7; WPBallotsCast = $10; WPVoterTurnout=$13

	WardCount++
	RegisteredVoters[Ward "." Precinct] = WPRegisteredVoters
	TotalRegisteredVoters += WPRegisteredVoters
	BallotsCast[Ward "." Precinct] = WPBallotsCast
	TotalBallotsCast += WPBallotsCast
	next
}

NF != 2 { print; abort() }

# total the votes from the wards
{
	wards[$1]++
	votes[$1] += $2
}
	

END {
	
	print "Registered-Voters", TotalRegisteredVoters
	printf("Ballots-Cast %d %2.1f%%\n", TotalBallotsCast, 100 * TotalBallotsCast / TotalRegisteredVoters)

	for (i in votes) {
		if (wards[i] == WardCount)	# city-wide races only
			print i, votes[i]
	}

	if (verbose > 0) {
		print "Not Counted"
		for (i in votes) {
			if (wards[i] == WardCount)
				print i, votes[i]
		}
		for (i in RegisteredVoters)
			print "Ward", i, RegisteredVoters[i]
	}
}

' | sort -nr -k2 | sed -e 's/^=//' -e 's/=/ /g' -e 's/@/ partisan/' -e 's/+/ unopposed/'

exit
